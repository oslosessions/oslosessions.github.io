{
  "name": "multiline",
  "version": "0.3.4",
  "description": "Multiline strings in JavaScript",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/sindresorhus/multiline"
  },
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "http://sindresorhus.com"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "mocha",
    "browser": "browserify -s $npm_package_name -o browser.js ."
  },
  "files": [
    "index.js",
    "browser.js"
  ],
  "keywords": [
    "browser",
    "multiline",
    "multi-line",
    "multiple",
    "line",
    "comment",
    "string",
    "str",
    "text",
    "comment"
  ],
  "dependencies": {
    "strip-indent": "^0.1.0"
  },
  "devDependencies": {
    "mocha": "*",
    "browserify": "^3.0.0",
    "callsites": "^0.2.0"
  },
  "readme": "# multiline [![Build Status](https://travis-ci.org/sindresorhus/multiline.svg?branch=master)](https://travis-ci.org/sindresorhus/multiline)\n\n> Multiline strings in JavaScript\n\nNo more string concatenation or array join!\n\n*Note that ES6 will have [template string](http://www.2ality.com/2011/09/quasi-literals.html) which can be multiline, but time...*\n\n#### Before\n\n```js\nvar str = '' +\n'<!doctype html>' +\n'<html>' +\n'\t<body>' +\n'\t\t<h1>❤ unicorns</h1>' +\n'\t</body>' +\n'</html>' +\n'';\n```\n\n#### After\n\n```js\nvar str = multiline(function(){/*\n<!doctype html>\n<html>\n\t<body>\n\t\t<h1>❤ unicorns</h1>\n\t</body>\n</html>\n*/});\n```\n\n\n## How\n\nIt works by wrapping the text in a block comment, anonymous function, and a function call. The anonymous function is passed into the function call and the contents of the comment extracted.\n\nEven though it's [slower than string concat](http://jsperf.com/multiline), that shouldn't realistically matter as you can still do 2 million of those a second. Convenience over micro performance always.\n\n\n## Install\n\n```bash\n$ npm install --save multiline\n```\n\n\n## Usage\n\nEverything after the first newline and before the last will be returned as seen below:\n\n```js\nvar str = multiline(function(){/*\n<!doctype html>\n<html>\n\t<body>\n\t\t<h1>❤ unicorns</h1>\n\t</body>\n</html>\n*/});\n```\n\nWhich outputs:\n\n```\n<!doctype html>\n<html>\n\t<body>\n\t\t<h1>❤ unicorns</h1>\n\t</body>\n</html>\n```\n\n### Strip indent\n\nYou can use `multiline.stripIndent()` to be able to indent your multiline string without preserving the redundant leading whitespace.\n\n```js\n\tvar str = multiline.stripIndent(function(){/*\n\t\t\t<!doctype html>\n\t\t\t<html>\n\t\t\t\t<body>\n\t\t\t\t\t<h1>❤ unicorns</h1>\n\t\t\t\t</body>\n\t\t\t</html>\n\t*/});\n```\n\nWhich outputs:\n\n```\n<!doctype html>\n<html>\n\t<body>\n\t\t<h1>❤ unicorns</h1>\n\t</body>\n</html>\n```\n\n## Use cases\n\nA real-world [use case](https://github.com/sindresorhus/pageres/blob/cb85922dec2b962c7b45484023c9ba43a9abf6bd/cli.js#L14-L33) from my `pageres` module.\n\nAnother use case is for query strings.  Here's [an example in Cypher](https://github.com/freethejazz/twitter-to-neo4j/blob/master/cypher/queries.js), the query language for Neo4j.\n\nHave one? Let me know.\n\n\n## Experiment\n\nI've also done an [experiment](experiment.js) where you don't need the anonymous function. It's too fragile and slow to be practical though.\n\nIt generates a callstack and extracts the contents of the comment in the function call.\n\n```js\nvar str = multiline(/*\n<!doctype html>\n<html>\n\t<body>\n\t\t<h1>❤ unicorns</h1>\n\t</body>\n</html>\n*/);\n```\n\n\n## FAQ\n\n### But JS already has multiline strings with `\\`?\n\n```js\nvar str = 'foo\\\nbar';\n```\n\nThis is not a multiline string. It's line-continuation. It doesn't preserve newlines, which is the main reason for wanting multiline strings.\n\nYou would need to do the following:\n\n```js\nvar str = 'foo\\n\\\nbar';\n```\n\nBut then you could just as well concatenate:\n\n```js\nvar str = 'foo\\n' +\n'bar';\n```\n\n*Note that ES6 will have real [multiline strings](https://github.com/lukehoban/es6features#template-strings).*\n\n\n## Browser\n\nWhile it does work fine in the browser, it's mainly intended for use in Node.js.\n\n### Install\n\nDownload [manually](https://github.com/sindresorhus/multiline/releases) or with a package-manager.\n\n```bash\n$ bower install --save multiline\n```\n\n```bash\n$ component install sindresorhus/multiline\n```\n\n### Compatibility\n\n- Latest Chrome\n- Firefox >=17\n- Safari >=4\n- Opera >=9\n- Internet Explorer >=6\n\n### Minification\n\nEven though minifiers strip comments by default there are ways to preserve them:\n\n- Uglify: Use `/*@preserve` instead of `/*` and enable the `comments` option\n- Closure Compiler: Use `/*@preserve` instead of `/*`\n- YUI Compressor: Use `/*!` instead of `/*`\n\nYou also need to add `0` after the comment so it's not removed as dead-code.\n\nThe final result would be:\n\n```js\nvar str = multiline(function(){/*!@preserve\n<!doctype html>\n<html>\n\t<body>\n\t\t<h1>❤ unicorns</h1>\n\t</body>\n</html>\n*/0});\n```\n\n\n## License\n\n[MIT](http://opensource.org/licenses/MIT) © [Sindre Sorhus](http://sindresorhus.com)\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/sindresorhus/multiline/issues"
  },
  "homepage": "https://github.com/sindresorhus/multiline",
  "_id": "multiline@0.3.4",
  "_from": "multiline@^0.3.4"
}
