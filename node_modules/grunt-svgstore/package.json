{
  "name": "grunt-svgstore",
  "description": "Merge SVGs from a folder.",
  "version": "0.4.1",
  "homepage": "https://github.com/FWeinb/grunt-svgstore",
  "author": {
    "name": "Fabrice Weinberg",
    "email": "Fabrice@weinberg.me"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/FWeinb/grunt-svgstore.git"
  },
  "bugs": {
    "url": "https://github.com/FWeinb/grunt-svgstore/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/FWeinb/grunt-svgstore/blob/master/LICENSE-MIT"
    }
  ],
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt": "~0.4.5",
    "html-minifier": "~0.6.8",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-jshint": "~0.10.0",
    "grunt-contrib-nodeunit": "~0.4.0"
  },
  "dependencies": {
    "chalk": "^0.4.0",
    "cheerio": "^0.17.0",
    "js-beautify": "^1.5.1",
    "multiline": "^0.3.4",
    "handlebars": "^2.0.0"
  },
  "peerDependencies": {
    "grunt": "~0.4.5"
  },
  "keywords": [
    "svg",
    "icon",
    "sprite"
  ],
  "readme": "# grunt-svgstore [![NPM version](https://badge.fury.io/js/grunt-svgstore.svg)](http://badge.fury.io/js/grunt-svgstore) [![Build Status](https://travis-ci.org/FWeinb/grunt-svgstore.svg?branch=master)](https://travis-ci.org/FWeinb/grunt-svgstore)\n\n> Merge SVGs from a folder.\n\n## Why?\nBecause [Chris Coyier](http://shoptalkshow.com/episodes/103-louis-lazaris/#t=33:52) asked.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.5`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-svgstore --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-svgstore');\n```\n\n## Screencast \n\nChris made a screencast, using `grunt-svgstore` in a real project, you can find it [here](http://css-tricks.com/video-screencasts/screencast-134-tour-site-progress-built-jekyll-grunt-sass-svg-system/).\n\n\n## The \"svgstore\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `svgstore` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  svgstore: {\n    options: {\n      prefix : 'icon-', // This will prefix each ID\n      svg: { // will add and overide the the default xmlns=\"http://www.w3.org/2000/svg\" attribute to the resulting SVG\n        viewBox : '0 0 100 100',\n        xmlns: 'http://www.w3.org/2000/svg'\n      }\n    },\n    your_target: {\n      // Target-specific file lists and/or options go here.\n    },\n  },\n});\n```\n\n### Options\n\n#### options.prefix\nType: `String`  \nDefault value: `''`  \n\nA string value that is used to prefix each filename to generate the id.\n\n#### options.svg\nType: `Object`  \nDefault value: `{}`  \n\nAn object that is used to generate attributes for the resulting `svg` file.\n```js\n{\n  viewBox: '0 0 100 100'\n}\n```\nwill result in:\n\n```svg\n<svg viewBox=\"0 0 100 100\">\n[...]\n```\n\n#### options.symbol (since 0.2.4)\nType: `Object`  \nDefault value: `{}`  \n\nJust like `options.svg` but will add attributes to each generated `<symbol>`.\n\n#### options.formatting (since 0.0.4)\nType: `Object` or `boolean`  \nDefault value: `false`  \n\nFormatting options for generated code.\n\nTo format the generated HTML, set `formatting` with [options](https://github.com/einars/js-beautify#options) like: `{indent_size : 2}`, which in context looks like:\n\n```js\ndefault: {\n  options: {\n    formatting : {\n      indent_size : 2\n    }\n  }\n```\nSee [js-beautify](https://github.com/einars/js-beautify) for more options.\n\n#### options.includedemo (since 0.3.5)\nType: `boolean|string|function`  \nDefault value: `false`\n\nThis will include a demo HTML (named like `destName + -demo.html`) from where you can copy your `<use>` blocks.\n\nThe default template used looks like:\n\n```html\n<!doctype html>\n<html>\n  <head>\n    <style>\n      svg{\n       width:50px;\n       height:50px;\n       fill:black !important;\n      }\n    </style>\n  <head>\n  <body>\n    {{{svg}}}\n\n    {{#each icons}}\n        <svg>\n          <use xlink:href=\"#{{name}}\" />\n        </svg>\n    {{/each}}\n\n  </body>\n</html>\n```\n\nSince `0.3.5` you can customise this by passing in a `string` that will be compiled via `handlebars` and used as a tempalte. If it is a function this function is expeced to take one parameter and return a string. \n\nThe data passed to the template looks like this:\n```js\n{\n  svg : '[raw HTML of the generated svg]',\n  icons : [\n    name : 'name of an item',\n    title : 'extracted title or name'\n  ]\n}\n```\n\n#### options.cleanup (since 0.2.6)\nType: `boolean`  or `Array`\nDefault value: `false`  \n\nThis option can be used to clean up inline definitions that may jeopardise later CSS-based styles.  \nWhen set to true clean up all inline `style` attributes.  \nApart from true / false, the value of this property can be an array of inline attributes ( like `fill`, `stroke`, ...) you want to remove from the elements in the SVG.\n\n#### options.cleanupdefs (since 0.3.0)\nType: `boolean`  \nDefault value: `false`  \n\nWhen set to false, no cleanup is performed on the `<defs>` element.\n\n#### options.inheritviewbox (since 0.4.0)\nType: `boolean`  \nDefault value: `false`\n\nBy default, each generated `<symbol>` will only automatically have a `viewBox`\nattribute set if the original source SVG file for that symbol has a `viewBox`.\n\nWhen `inheritviewbox` is set to `true`, if the source SVG has no `viewBox` but\nit *does* have a pixel-based `width` and `height`, then the `<symbol>`\n`viewBox` will be derived using those values instead.\n\nFor example, with `inheritviewbox: true`,\n\n```svg\n<svg width=\"256\" height=\"128\">\n```\n\nwill result in:\n\n```svg\n<symbol viewBox=\"0 0 256 128\" ...>\n```\n\n#### options.convertNameToId (since 0.4.0)\nType: `function`\n\nThe function used to generate the ID from the file name. The function receives the file name without the `.svg` extension as its only argument.\n\nThe default implementation:\n```js\nfunction(name) {\n  var dotPos = name.indexOf('.');\n  if ( dotPos > -1){\n    name = name.substring(0, dotPos);\n  }\n  return name;\n}\n```\n\n#### options.fixedSizeVersion (Since 0.4.0)\nType: `Object` or `boolean`\nDefault value: `false`\n\nWhen `true` or a configuration object is passed for each of the symbols another one, with suffixed id generated.\nAll those additional symbols have the common dimensions and refers to the original symbols with `<use>`.\nOriginal symbols are placed exactly in the middle of the fixed-size viewBox of the fixed size version.\n\nConfiguration reference and default values if `true` is passed:\n```js\ngrunt.initConfig({\n  svgstore: {\n    options: {\n      fixedSizeVersion: {\n        width: 50,\n        height: 50,\n        suffix: '-fixed-size',\n        maxDigits: {\n          translation: 4,\n          scale: 4,\n        },\n      },\n    },\n  },\n});\n```\n\nAny of the configuration object properties may be omitted.\n\n### Usage Examples\n\nThis example will merge all elements from the `svgs` folder into the `<defs>`-Block of the `dest.svg`. You can use that SVG in HTML like:\n\n```html\n<!-- Include dest.svg -->\n\n[...]\n\n<svg><use xlink:href=\"#filename\" /></svg>\n````\n\n```js\ngrunt.initConfig({\n  svgstore: {\n    options: {},\n    default : {\n      files: {\n        'dest/dest.svg': ['svgs/*.svg'],\n      },\n    },\n  },\n});\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n\n#### 0.4.1\n  \n  * Introducing the `preserve--` prefix for attributes to force these attributes in the result svg (See [#71](https://github.com/FWeinb/grunt-svgstore/pull/71))\n\n#### 0.4.0\n  * Generate fixed sized reference based copies of symbols (See [#58](https://github.com/FWeinb/grunt-svgstore/pull/58))\n  * Add a way to inherit the viewbox form the source svg (See [#66](https://github.com/FWeinb/grunt-svgstore/pull/66))\n  * Expose `convertNameToId` option to customize how ids are derived from file names. (See [#68](https://github.com/FWeinb/grunt-svgstore/pull/68))\n  * Changed the way ids are generated by using the result of `convertNameToId` to prefix each id. (See [#50](https://github.com/FWeinb/grunt-svgstore/issues/50))\n\n#### 0.3.6\n\n  * Preserve currentColor in `fill` attribute even if `cleanup` is set to `true`. (See [#63](https://github.com/FWeinb/grunt-svgstore/pull/63)) \n\n#### 0.3.5\n\n  * Add the ability to use [`handlebars`](http://handlebarsjs.com/) templates in `options.includedemo`.\n\n#### 0.3.4\n\n  * Fixed an issue with SMIL animations inside a svg symbole (See [#56](https://github.com/FWeinb/grunt-svgstore/issues/56))\n  * Update to cheerio `0.17.0`\n\n#### 0.3.3\n\n  * Fix broken id references between nested `<symbol>` tags. (See [#50](https://github.com/FWeinb/grunt-svgstore/issues/50#issuecomment-52271449))\n\n#### 0.3.2 \n  \n  * Move `linearGradient`, `radialGradient` and `pattern` elements out of the `<symbol>` tag. (See [#49](https://github.com/FWeinb/grunt-svgstore/issues/49))\n\n#### 0.3.1\n\n  * Fix removal of unreferenced IDs (See [#46](https://github.com/FWeinb/grunt-svgstore/issues/46))\n\n#### 0.3.0\n\n  * Changed the way ID are collected; <del>unreferenced IDs are removed now in order to save space.</del> ([#40](https://github.com/FWeinb/grunt-svgstore/pull/40))\n  * Changed the behavior of the 'cleanup'-option (introduced in 0.2.6). Apart from true / false, the value of this property can now be an array of attributes. All attributes in the array are removed from all elements in the SVG. ([#41](https://github.com/FWeinb/grunt-svgstore/pull/41))\n  * Added an option 'cleanupdefs' (default: false). When set to false, no cleanup is performed on the `<defs>` element. ([#41](https://github.com/FWeinb/grunt-svgstore/pull/41))\n  * Empty `<g>` elements are removed since they have no effect in a document. ([#42](https://github.com/FWeinb/grunt-svgstore/pull/42))\n  \nThanks to [Frank3K](https://github.com/Frank3K) for the PRs\n\n#### 0.2.7\n  * Don't generate IDs that start with a number by prefixing them with `svgstore`. (Thanks to [#38](https://github.com/FWeinb/grunt-svgstore/pull/38))\n\n#### 0.2.6\n  * Add `options.clean` to remove inline styles from source svgs. (Thanks to [ain](https://github.com/FWeinb/grunt-svgstore/pull/37))\n  * Reformat source to use 2 spaces for indentation (Fix [#36](https://github.com/FWeinb/grunt-svgstore/issues/36))\n\n#### 0.2.5\n  * To generate the id from the filename is now used as a title. (Fix [#33](https://github.com/FWeinb/grunt-svgstore/issues/33))\n\n#### 0.2.4\n  * Added `options.symbol` to add attributes to generated `<symbol>`s ([#30](https://github.com/FWeinb/grunt-svgstore/pull/30))\n  * To generate the id from the filename the name is now cut right before the first dot. `name.min.svg` becomes `name`. (Fixes [#29](https://github.com/FWeinb/grunt-svgstore/issues/29))\n\n#### 0.2.3\n  * Fixed lower case `viewBox` in outputted svg (fix [#26](https://github.com/FWeinb/grunt-svgstore/issues/26))\n\n#### 0.2.2\n  * Fixed a bug where self-closing elements where nested.\n\n#### 0.2.1\n  * Move `<symbol>`-tag out of `<defs>`-tag (see the [spec](http://www.w3.org/TR/SVG11/struct.html#SymbolElement))\n  * Only create `<defs>`-tag if needed (e.g.  `<linearGradient>` is used)\n\n#### 0.2.0\n  * Use a `<symbol>`-tag for representing icons (See [TxHawks Comment](https://github.com/FWeinb/grunt-svgstore/issues/16#issuecomment-43786059).)\n  * Write the `viewBox` attribute to the `<symbol>`-tag,\n  * Include `title` and `desc` elements in the generated svg for each `<symbol>`\n  * use 'filename' as a fallback for `title`\n  * Fix issue [#1](https://github.com/FWeinb/grunt-svgstore/issues/1)\n\n#### 0.1.0\n  * Always add `xmlns` namspace.\n  * Added the `includedemo` option.\n  * Fixed Issues [#20](https://github.com/FWeinb/grunt-svgstore/issues/20), [#19](https://github.com/FWeinb/grunt-svgstore/issues/19), [#18](https://github.com/FWeinb/grunt-svgstore/issues/18)\n\n#### 0.0.4\n  * Fixed issue with referencing ids with `url()` (fix [#12](https://github.com/FWeinb/grunt-svgstore/issues/12))\n\n#### 0.0.3\n  * Added `options.formatting` to format svg via [js-beautify](https://github.com/einars/js-beautify)\n\n#### 0.0.2\n  * Fixed npm dependencies\n\n#### 0.0.1\n  * Inital release\n",
  "readmeFilename": "README.md",
  "_id": "grunt-svgstore@0.4.1",
  "dist": {
    "shasum": "4b1cb0f7d2eedf24916aea62826a48af1d541379"
  },
  "_from": "grunt-svgstore@0.4.1",
  "_resolved": "https://registry.npmjs.org/grunt-svgstore/-/grunt-svgstore-0.4.1.tgz"
}
